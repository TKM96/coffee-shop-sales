---CHECKING WHEN THE DATASET STARTS AND ENDS
-- THE DATASET IS FOR THE FIRST 6 MONTHS OF 2023, FROM THE FIRST DAY OF 2023 TO THE LAST DAY OF JUNE 2023
SELECT MIN(TRANSACTION_DATE) AS START_DATE, 
	   MAX(TRANSACTION_DATE) AS END_DATE
FROM COFFEE;

---CHECKING OPEN AND CLOSING TIMES PER STORE LOCATION: 
--ASTORIA STORE OPERATES FROM 7AM UNTIL 8PM
--HELL'S KITCHEN STORE OPERATES FROM 06:30 AM UNTIL 9PM
--LOWER MANHATTAN STORE OPERATES FROM 6AM UNTIL 08:30 PM
SELECT STORE_LOCATION,
	   MIN(TRANSACTION_TIME) AS OPEN_TIME, 
	   MAX(TRANSACTION_TIME) AS CLOSING_TIME 
FROM COFFEE
GROUP BY STORE_LOCATION;

---
--- ADDING A COLUMN FOR TOTAL AMOUNT PER TRANSACTION
WITH CTE AS (
			 SELECT transaction_id,
			 		TRANSACTION_DATE,
					TRANSACTION_TIME,
					TRANSACTION_QTY,
					STORE_ID,
					TRIM(INITCAP(STORE_LOCATION)) AS STORE_LOCATION,
					PRODUCT_ID,
					UNIT_PRICE,
					TRIM(INITCAP(PRODUCT_CATEGORY)) AS PRODUCT_CATEGORY,
					TRIM(INITCAP(PRODUCT_TYPE)) AS PRODUCT_TYPE,
					TRIM(INITCAP(PRODUCT_DETAIL)) AS PRODUCT_DETAIL,
			 		ROUND((TRANSACTION_QTY*UNIT_PRICE),2) AS TOTAL
			 FROM COFFEE
),
--- USING ROW_NUMBER WINDOW FUNCTION TO BE ABLE TO IDENTIFY DUPLICATE RECORDS
--- IDENTIFYING DUPLICATES 
--(DUPLICATE IS A TRANSACTION OF THE SAME PRODUCT, SAME QUANTITY,SAME PRICE PRICE,MADE ON THE SAME DATE AT THE SAME TIME AND STORE LOCATION)
CTE1 AS (
			 SELECT *,
			 	    ROW_NUMBER()OVER(PARTITION BY TRANSACTION_DATE, TRANSACTION_TIME, TRANSACTION_QTY, STORE_ID, STORE_LOCATION, PRODUCT_ID, TOTAL ORDER BY
					 TRANSACTION_DATE, TRANSACTION_TIME) AS ROW_NUM
			 FROM CTE		 
)
--- COUNTING DUPLICATE RECORDS (ROWS WITH ROW NUMBER GREATER THAN 1)
--- THERE ARE 398 DUPLICATE RECORDS
			 SELECT COUNT(*) 
			 FROM CTE1 
			 WHERE ROW_NUM > 1 ;



WITH CTE AS (
			 SELECT transaction_id,
			 		TRANSACTION_DATE,
					TRANSACTION_TIME,
					TRANSACTION_QTY,
					STORE_ID,
					TRIM(INITCAP(STORE_LOCATION)) AS STORE_LOCATION,
					PRODUCT_ID,
					UNIT_PRICE,
					TRIM(INITCAP(PRODUCT_CATEGORY)) AS PRODUCT_CATEGORY,
					TRIM(INITCAP(PRODUCT_TYPE)) AS PRODUCT_TYPE,
					TRIM(INITCAP(PRODUCT_DETAIL)) AS PRODUCT_DETAIL, 
			 		ROUND((TRANSACTION_QTY*UNIT_PRICE),2) AS TOTAL
			 FROM COFFEE
),
CTE1 AS (
			 SELECT *,
			 	    ROW_NUMBER()OVER(PARTITION BY TRANSACTION_DATE, TRANSACTION_TIME, TRANSACTION_QTY, STORE_ID, STORE_LOCATION, PRODUCT_ID, TOTAL ORDER BY
					 TRANSACTION_DATE, TRANSACTION_TIME) AS ROW_NUM
			 FROM CTE		 
),
-- ADDING PERIOD OF DAY COLUMN AND A DAYNAME COLUMN
CTE2 AS (
			 SELECT *,
			 	    TO_CHAR(TRANSACTION_DATE, 'Day')AS WEEKDAY,
			        CASE 
						WHEN TRANSACTION_TIME BETWEEN '06:00:00' AND '11:59:59' THEN 'Morning'
						WHEN TRANSACTION_TIME BETWEEN '12:00:00' AND '17:59:59' THEN 'Afternoon'
						ELSE 'Evening'
						END AS PERIOD_OF_DAY
			 FROM CTE1 
			 WHERE ROW_NUM =1
),
--RE-ARRANGING THE COLUMN NAMES
CTE3 AS(
				SELECT TRANSACTION_ID,
					   TRANSACTION_DATE,
					   TO_CHAR(TRANSACTION_DATE, 'Mon') as MONTH_NAME,
					   EXTRACT(MONTH FROM TRANSACTION_DATE) AS MONTH_NUMBER,
					   WEEKDAY,
					   TRANSACTION_TIME,
					   PERIOD_OF_DAY,
					   STORE_LOCATION,
					   STORE_ID,
					   PRODUCT_TYPE,
					   PRODUCT_CATEGORY,
					   PRODUCT_DETAIL,
					   PRODUCT_ID,
					   TRANSACTION_QTY,
					   ROUND(UNIT_PRICE,2) AS UNIT_PRICE,
					   TOTAL
				FROM CTE2
         ),
---MoM GROWTH(%)
CTE4 AS (
			SELECT MONTH_NUMBER,
				   MONTH_NAME,
				   SUM(TOTAL) AS CURRENT_MONTH_SALES
		    FROM CTE3
			GROUP BY MONTH_NUMBER, MONTH_NAME
                                             ),
CTE5 AS (
	    	SELECT *,
				   LAG(CURRENT_MONTH_SALES)OVER(ORDER BY MONTH_NUMBER) AS PREVIOUS_MONTH_SALES
			FROM CTE4
                     )

SELECT *,
	   ROUND((((CURRENT_MONTH_SALES-PREVIOUS_MONTH_SALES)/PREVIOUS_MONTH_SALES)*100),2) AS MONTH_OVER_MONTH
FROM CTE5;



---WoW GROWTH (%)
WITH CTE AS (
			SELECT *, 
				   ROUND((TRANSACTION_QTY*UNIT_PRICE),2) AS TOTAL
			FROM COFFEE),
CTE1 AS (
			SELECT *,
			 	    ROW_NUMBER()OVER(PARTITION BY TRANSACTION_DATE, TRANSACTION_TIME, TRANSACTION_QTY, STORE_ID, STORE_LOCATION, PRODUCT_ID, TOTAL ORDER BY
					 TRANSACTION_DATE, TRANSACTION_TIME) AS ROW_NUM
			FROM CTE		 
),
CTE2 AS (
			SELECT EXTRACT(WEEK FROM TRANSACTION_DATE) AS WEEK,
				   SUM(TOTAL) AS CURRENT_WEEK_SALES
			FROM CTE1
			WHERE ROW_NUM =1
			GROUP BY WEEK
			ORDER BY WEEK
),
CTE3 AS (
            SELECT *,
				   LAG(CURRENT_WEEK_SALES)OVER(ORDER BY WEEK) AS PREVIOUS_WEEK_SALES
			 FROM CTE2
)
SELECT 
		*,
		round(((CURRENT_WEEK_SALES-PREVIOUS_WEEK_SALES)/PREVIOUS_WEEK_SALES)*100,2) AS Week_Over_Week
FROM CTE3;


--- MONTH-TO-DATE
WITH CTE AS(
			SELECT *,
			       ROUND((TRANSACTION_QTY*UNIT_PRICE),2) AS TOTAL_SALES
			FROM COFFEE
			),
CTE1 AS (
			SELECT  TRANSACTION_DATE,
					EXTRACT(MONTH FROM TRANSACTION_DATE) AS MONTH_NUMBER,
					TO_CHAR(TRANSACTION_DATE,'Mon') AS MONTH_NAME,
					SUM(TOTAL_SALES) AS TOTAL
			FROM CTE
			GROUP BY TRANSACTION_DATE, MONTH_NAME, MONTH_NUMBER
					
            )
SELECT *,
	   SUM(TOTAL)OVER(PARTITION BY MONTH_NUMBER, MONTH_NAME ORDER BY TRANSACTION_DATE) AS MONTH_TO_DATE
FROM CTE1
